import Head from "next/head";
import { useSession, useSupabaseClient } from "@supabase/auth-helpers-react";

import {
  Box,
  Button,
  Input,
  PasswordInput,
  Text,
  Card,
  Space,
} from "@mantine/core";
import { showNotification } from "@mantine/notifications";

import { AddTodo, Todo } from "../components";

import { useEffect, useState } from "react";

export default function Home() {
  const session = useSession();
  return (
    <div>
      <Head>
        <title>Supabase Auth Example</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Account id={session?.user?.id} />
    </div>
  );
}

const Account = () => {
  const supabase = useSupabaseClient();
  const session = useSession();

  const [isOpenAddTodo, setisOpenAddTodo] = useState(false);
  const [todos, setTodos] = useState([]);

  useEffect(() => {
    // Fetch all todos of current logged in user

    (async () => {
      const {
        data: { user },
      } = await supabase.auth.getUser();
      console.log(user);

      supabase
        .from("todos")
        .select("*")
        .eq("user_id", user?.id)
        .order("id", { ascending: false })
        .then(({ data, error }) => {
          if (!error) {
            setTodos(data);
          }

          console.log(error);
        });
    })();

    const insertListener = supabase
      .channel("public:todos")
      .on(
        "postgres_changes",
        {
          event: "INSERT",
          schema: "public",
          table: "todos",
        },
        (payload) => {
          const newTodo = payload.new;
          setTodos((oldTodos) => {
            const newTodos = [...oldTodos, newTodo];
            newTodos.sort((a, b) => b.id - a.id);
            return newTodos;
          });
        }
      )
      .subscribe();

    const updateListener = supabase
      .channel("public:todos")
      .on(
        "postgres_changes",
        { event: "UPDATE", schema: "public", table: "todos" },
        (payload) => {
          setTodos((oldTodos) => {
            const unchangedTodos = oldTodos.filter(
              (todo) => todo?.id !== payload?.new?.id
            );
            const newTodos = [...unchangedTodos, payload?.new];
            newTodos.sort((a, b) => b.id - a.id);
            return newTodos;
          });
        }
      )
      .subscribe();

    return () => {
      insertListener.unsubscribe();
      updateListener.unsubscribe();
    };
  }, [isOpenAddTodo]);

  const handleSignOut = async () => {
    const { error } = await supabase.auth.signOut();
  };

  return (
    <div className="p-8 space-y-6">
      <p>
        Signed in as : <strong>{session?.user?.email}</strong>
      </p>
      <Button color="dark" w="100%" onClick={handleSignOut}>
        Sign out
      </Button>
      <hr />
      <Button
        variant="light"
        fullWidth
        size="lg"
        mb={12}
        onClick={() => setisOpenAddTodo(true)}
      >
        Add Todo
      </Button>

      <div className="space-y-4 max-h-[calc(100% - 300px)]overflow-y-auto">
        <AddTodo
          isOpen={isOpenAddTodo}
          onClose={() => setisOpenAddTodo(false)}
        />
        {todos.map((todo) => (
          <Todo todo={todo} key={todo.id} />
        ))}
      </div>
    </div>
  );
};
